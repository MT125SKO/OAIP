#1 
import numpy as np
a = np.array([[3.96, -1.5, 0, -0.99, -1.4, 0],
              [3.96, 18.3, 1.6, 6.93, 4.3, 1.5],
              [0, 4.5, -13, 4.29, -1.4, 2.3],
              [3.96, 0.4, 0, 5.94, 1.5, 0],
              [5.94, 3.1, 3.4, 0.99, 14.4, 0.9],
              [-2.97, -1.2, 0.8, 4.95, -2.7, 12.7]])
aa = np.array([11.95, -64.89, -38.57, -23.82, -84.83, 30.35])
gau = np.linalg.solve(a, aa)
print("Mетода Гаусса")
print(gau)
#2
import numpy as np

a = np.array([[3.96, -1.5, 0, -0.99, -1.4, 0],
              [3.96, 18.3, 1.6, 6.93, 4.3, 1.5],
              [0, 4.5, -13, 4.29, -1.4, 2.3],
              [3.96, 0.4, 0, 5.94, 1.5, 0],
              [5.94, 3.1, 3.4, 0.99, 14.4, 0.9],
              [-2.97, -1.2, 0.8, 4.95, -2.7, 12.7]])
aa = np.array([32.83, 91.31, 29.91, 98.8, 57.97, 37.29])
# создания массивов  np.array
gau = np.linalg.solve(a, aa)
print("Mетода Гаусса")
print(gau)
#3 как и 2 по значениям
#метода Краммера.
#1
import numpy as np
matrix = np.array([
    [3.96, -1.5, 0, -0.99, -1.4, 0],
    [3.96, 18.3, 1.6, 6.93, 4.3, 1.5],
    [0, 4.5, -13, 4.29, -1.4, 2.3],
    [3.96, 0.4, 0, 5.94, 1.5, 0],
    [5.94, 3.1, 3.4, 0.99, 14.4, 0.9],
    [-2.97, -1.2, 0.8, 4.95, -2.7, 12.7]])
vector = np.array([11.95, -64.89, -38.57, -23.82, -84.83, 30.35])
matrix_nov = np.linalg.det(matrix)
x = []
for a in range(len(vector)):
    cop = matrix.copy()
    cop[:, a] = vector
    ta = np.linalg.det(cop)
    xi = ta / matrix_nov
    x.append(xi)
print(x)  
#метода Краммера.
#2
import numpy as np
matrix = np.array([
    [3.96, -1.5, 0, -0.99, -1.4, 0],
    [3.96, 18.3, 1.6, 6.93, 4.3, 1.5],
    [0, 4.5, -13, 4.29, -1.4, 2.3],
    [3.96, 0.4, 0, 5.94, 1.5, 0],
    [5.94, 3.1, 3.4, 0.99, 14.4, 0.9],
    [-2.97, -1.2, 0.8, 4.95, -2.7, 12.7]])
vector = np.array([32.83, 91.31, 29.91, 98.8, 57.97, 37.29])
matrix_nov = np.linalg.det(matrix)
x = []
for a in range(len(vector)):
    cop = matrix.copy()
    cop[:, a] = vector
    ta = np.linalg.det(cop)
    xi = ta / matrix_nov
    x.append(xi)
print(x)
